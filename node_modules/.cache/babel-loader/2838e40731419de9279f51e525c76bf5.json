{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nikhi\\\\Downloads\\\\easybooking\\\\easybooking\\\\src\\\\components\\\\home.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Calendar from 'react-calendar'; // Import the Calendar component\n\nimport 'react-calendar/dist/Calendar.css';\nimport './home.css'; // Import your custom CSS file for styling\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = _ref => {\n  _s();\n\n  let {\n    bookedAppointments = [],\n    setBookedAppointments = () => {}\n  } = _ref;\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [availableTimeSlots, setAvailableTimeSlots] = useState([]);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n\n  const handleDateClick = async date => {\n    setSelectedDate(date); // Extract year, month, and day\n\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1; // January is 0\n\n    const day = date.getDate(); // Fetch available time slots from the backend\n\n    try {\n      const response = await fetch(`/available-time-slots/${year}/${month}/${day}`);\n      const data = await response.json();\n\n      if (response.ok) {\n        const timeSlots = data.timeSlots;\n        setAvailableTimeSlots(timeSlots);\n        setSelectedTimeSlot(null);\n      } else {\n        setAvailableTimeSlots([]);\n        setSelectedTimeSlot(null);\n        alert('Please login first');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleTimeSlotClick = timeSlot => {\n    console.log(timeSlot);\n    setSelectedTimeSlot(timeSlot);\n    console.log(selectedTimeSlot);\n  };\n\n  const handleBookAppointment = async () => {\n    console.log(selectedTimeSlot);\n    console.log(selectedDate);\n\n    if (selectedDate && selectedTimeSlot) {\n      const selectedTimeSlotObj = availableTimeSlots.find(slot => slot.startTime === selectedTimeSlot);\n      console.log(selectedTimeSlot);\n\n      if (!selectedTimeSlotObj) {\n        return;\n      }\n\n      const timeSlotId = selectedTimeSlotObj._id;\n\n      try {\n        const response = await fetch(`/book-time-slot/${timeSlotId}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const data = await response.json();\n\n        if (response.ok) {\n          // Booking successful\n          alert(data.message); // Redirect to My Appointments page\n\n          window.location.href = '/my-appointments';\n        } else {\n          // Booking failed\n          alert(data.message);\n        }\n      } catch (error) {\n        console.error(error);\n        alert('Error booking time slot');\n      }\n    } else {\n      alert('Please select a date and time slot.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: \"Appointment Scheduler\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-container\",\n          children: /*#__PURE__*/_jsxDEV(Calendar, {\n            onClickDay: handleDateClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: selectedDate && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Available Time Slots for \", selectedDate.toDateString(), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group-vertical\",\n            children: availableTimeSlots === null || availableTimeSlots === void 0 ? void 0 : availableTimeSlots.map((timeSlot, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn ${selectedTimeSlot === timeSlot.startTime ? 'btn-success' : 'btn-primary'}`,\n              onClick: () => handleTimeSlotClick(timeSlot.startTime),\n              children: `${timeSlot.startTime} - ${timeSlot.endTime}`\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), selectedTimeSlot && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success mt-3\",\n            onClick: handleBookAppointment,\n            children: \"Book Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"eGvdE9jHb5+Yex6Yw76vyWWxEpI=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/nikhi/Downloads/easybooking/easybooking/src/components/home.tsx"],"names":["React","useState","Calendar","Home","bookedAppointments","setBookedAppointments","selectedDate","setSelectedDate","availableTimeSlots","setAvailableTimeSlots","selectedTimeSlot","setSelectedTimeSlot","handleDateClick","date","year","getFullYear","month","getMonth","day","getDate","response","fetch","data","json","ok","timeSlots","alert","error","console","handleTimeSlotClick","timeSlot","log","handleBookAppointment","selectedTimeSlotObj","find","slot","startTime","timeSlotId","_id","method","headers","message","window","location","href","toDateString","map","index","endTime"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport Calendar from 'react-calendar'; // Import the Calendar component\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport './home.css'; // Import your custom CSS file for styling\r\nimport MyAppointments from './MyAppointment';\r\n\r\ninterface Appointment {\r\n  date: string;\r\n  timeSlot: TimeSlot;\r\n}\r\n\r\ninterface HomeProps {\r\n  bookedAppointments?: Appointment[];\r\n  setBookedAppointments?: React.Dispatch<React.SetStateAction<Appointment[]>>;\r\n}\r\n\r\ninterface TimeSlot {\r\n  _id: string;\r\n  year: number;\r\n  month: number;\r\n  day: number;\r\n  startTime: string;\r\n  endTime: string;\r\n  isBooked: boolean;\r\n  userId: string;\r\n}\r\n\r\nconst Home: React.FC<HomeProps> = ({ bookedAppointments = [], setBookedAppointments = () => {} }) => {\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n  const [availableTimeSlots, setAvailableTimeSlots] = useState<TimeSlot[]>([]);\r\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string | null>(null);\r\n\r\n  const handleDateClick = async (date: Date) => {\r\n    setSelectedDate(date);\r\n\r\n    // Extract year, month, and day\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1; // January is 0\r\n    const day = date.getDate();\r\n\r\n    // Fetch available time slots from the backend\r\n    try {\r\n      const response = await fetch(`/available-time-slots/${year}/${month}/${day}`);\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        const timeSlots = data.timeSlots;\r\n        setAvailableTimeSlots(timeSlots);\r\n        setSelectedTimeSlot(null);\r\n      } else {\r\n        setAvailableTimeSlots([]);\r\n        setSelectedTimeSlot(null);\r\n        alert('Please login first');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleTimeSlotClick = (timeSlot: string) => {\r\n    console.log(timeSlot)\r\n    setSelectedTimeSlot(timeSlot);\r\n    console.log(selectedTimeSlot)\r\n  };\r\n\r\n  const handleBookAppointment = async () => {\r\n    console.log(selectedTimeSlot)\r\n    console.log(selectedDate)\r\n    if (selectedDate && selectedTimeSlot) {\r\n      const selectedTimeSlotObj = availableTimeSlots.find(slot => slot.startTime === selectedTimeSlot);\r\n      console.log(selectedTimeSlot)\r\n      if (!selectedTimeSlotObj) {\r\n        return;\r\n      }\r\n  \r\n      const timeSlotId = selectedTimeSlotObj._id;\r\n  \r\n      try {\r\n        const response = await fetch(`/book-time-slot/${timeSlotId}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n          // Booking successful\r\n          alert(data.message);\r\n          // Redirect to My Appointments page\r\n          window.location.href = '/my-appointments';\r\n        } else {\r\n          // Booking failed\r\n          alert(data.message);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Error booking time slot');\r\n      }\r\n    } else {\r\n      alert('Please select a date and time slot.');\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n    <h2 className=\"text-center mb-4\">Appointment Scheduler</h2>\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <div className=\"calendar-container\">\r\n          <Calendar onClickDay={handleDateClick} />\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        {selectedDate && (\r\n          <div>\r\n            <h3>Available Time Slots for {selectedDate.toDateString()}:</h3>\r\n            <div className=\"btn-group-vertical\">\r\n              {availableTimeSlots?.map((timeSlot, index) => (\r\n                <button\r\n                  key={index}\r\n                  className={`btn ${selectedTimeSlot === timeSlot.startTime ? 'btn-success' : 'btn-primary'}`}\r\n                  onClick={() => handleTimeSlotClick(timeSlot.startTime)}\r\n                >\r\n                  {`${timeSlot.startTime} - ${timeSlot.endTime}`}\r\n                </button>\r\n              ))}\r\n            </div>\r\n            {selectedTimeSlot && (\r\n              <button className=\"btn btn-success mt-3\" onClick={handleBookAppointment}>\r\n                Book Appointment\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}